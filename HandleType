# `handle<T>` type





# Summary
[summary]: #summary

Give users a way to return textures from a function, and assign them to a local variable. 
We make use of the type system to statically determine which texture is referenced.


# Motivation
[motivation]: #motivation

Current WGSL does not allow `ptr`s to types in the [`handle` address space](https://www.w3.org/TR/WGSL/#address-spaces-handle). This includes [textures](https://www.w3.org/TR/WGSL/#texture-types) and [samplers](https://www.w3.org/TR/WGSL/#sampler-types).

However, it can be very useful to have a variable that points at a texture. This enables seemingly storing a texture in a local variable.

```wgsl
let color_tex = bevy_pbr::material::bindings::base_color;

if(use_mips) {
  textureSample(color_tex, linear_sampler, uv);
} else {
  textureSampleLevel(color_tex, linear_sampler, uv, 0.0);
}
```

Combined with conditional compilation, one can also write functions that statically return different textures
```wgsl
@if(BINDLESS)
fn baseColorTexture(slot: u32) -> handle<texture_2d<f32>> {
    @if(BINDLESS)
    return bindless_textures_2d[material_indices[slot].base_color_texture];
    @else
    return pbr_bindings::base_color_texture;
}
```

Combined with bindless, this enables a convenient new pattern where the texture is selected up-front, and used later
```wgsl
let image = bindless_textures_2d[complex_slot_computation()];

// ....

let grid = mat2x2(
  textureSample(image, sampler, uv).x,
  textureSample(image, sampler, uv + vec2f(1,0)).x,
  textureSample(image, sampler, uv + vec2f(0,1)).x,
  textureSample(image, sampler, uv + vec2f(1,1)).x
);
```

However, this is limited to cases where it can be determined statically. Dynamically choosing a texture is not allowed by the WGSL semantics.
Therefore this would remain invalid
```wgsl
let my_tex = select(texture_b, texture_a, random_bool()); // error: texture_b and texture_a have different types
```

# Guide-level explanation
[guide-level-explanation]: #guide-level-explanation

Assigning a texture to a local variable, or returning a texture from a function gives you a unique `handle<texture>`. The same happens for samplers.

That `handle` type tracks the exact binding that the texture comes from. You can imagine it as a `handle<texture, binding::to::the::texture::variable>`.
For typical textures, this means that at runtime, there's nothing left.
For bindless textures, it desugars to a single integer for the slot.



Explain the proposal as if it was already included in the language and you were teaching it to another Rust programmer. That generally means:

- Introducing new named concepts.
- Explaining the feature largely in terms of examples.
- Explaining how Rust programmers should *think* about the feature, and how it should impact the way they use Rust. It should explain the impact as concretely as possible.
- If applicable, provide sample error messages, deprecation warnings, or migration guidance.
- If applicable, describe the differences between teaching this to existing Rust programmers and new Rust programmers.
- Discuss how this impacts the ability to read, understand, and maintain Rust code. Code is read and modified far more often than written; will the proposed feature make code easier to maintain?

For implementation-oriented RFCs (e.g. for compiler internals), this section should focus on how compiler contributors should think about the change, and give examples of its concrete impact. For policy RFCs, this section should provide an example-driven introduction to the policy, and explain its impact in concrete terms.

# Reference-level explanation
[reference-level-explanation]: #reference-level-explanation

This is the technical portion of the RFC. Explain the design in sufficient detail that:

- Its interaction with other features is clear.
- It is reasonably clear how the feature would be implemented.
- Corner cases are dissected by example.

The section should return to the examples given in the previous section, and explain more fully how the detailed proposal makes those examples work.

# Drawbacks
[drawbacks]: #drawbacks

Why should we *not* do this?

# Rationale and alternatives
[rationale-and-alternatives]: #rationale-and-alternatives

- Why is this design the best in the space of possible designs?
- What other designs have been considered and what is the rationale for not choosing them?
- What is the impact of not doing this?
- If this is a language proposal, could this be done in a library or macro instead? Does the proposed change make Rust code easier or harder to read, understand, and maintain?

# Prior art
[prior-art]: #prior-art

Discuss prior art, both the good and the bad, in relation to this proposal.
A few examples of what this can include are:

- For language, library, cargo, tools, and compiler proposals: Does this feature exist in other programming languages and what experience have their community had?
- For community proposals: Is this done by some other community and what were their experiences with it?
- For other teams: What lessons can we learn from what other communities have done here?
- Papers: Are there any published papers or great posts that discuss this? If you have some relevant papers to refer to, this can serve as a more detailed theoretical background.

This section is intended to encourage you as an author to think about the lessons from other languages, provide readers of your RFC with a fuller picture.
If there is no prior art, that is fine - your ideas are interesting to us whether they are brand new or if it is an adaptation from other languages.

Note that while precedent set by other languages is some motivation, it does not on its own motivate an RFC.
Please also take into consideration that rust sometimes intentionally diverges from common language features.

# Unresolved questions
[unresolved-questions]: #unresolved-questions

- What parts of the design do you expect to resolve through the RFC process before this gets merged?
- What parts of the design do you expect to resolve through the implementation of this feature before stabilization?
- What related issues do you consider out of scope for this RFC that could be addressed in the future independently of the solution that comes out of this RFC?

# Future possibilities
[future-possibilities]: #future-possibilities

Think about what the natural extension and evolution of your proposal would
be and how it would affect the language and project as a whole in a holistic
way. Try to use this section as a tool to more fully consider all possible
interactions with the project and language in your proposal.
Also consider how this all fits into the roadmap for the project
and of the relevant sub-team.

This is also a good place to "dump ideas", if they are out of scope for the
RFC you are writing but otherwise related.

If you have tried and cannot think of any future possibilities,
you may simply state that you cannot think of anything.

Note that having something written down in the future-possibilities section
is not a reason to accept the current or a future RFC; such notes should be
in the section on motivation or rationale in this or subsequent RFCs.
The section merely provides additional information.
